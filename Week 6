#include <iostream>
#include <sstream>
#include <string>
#include <map>
#include <vector>

// Forward declaration to enable references from CommandInterpreter to Player
class Player;

// A simple Room class to be used by Player for demonstration purposes
class Room {
public:
    std::string name;
    std::map<std::string, Room*> exits;

    Room(std::string name) : name(name) {}

    void addExit(std::string direction, Room* room) {
        exits[direction] = room;
    }

    Room* getExit(std::string direction) {
        if (exits.find(direction) != exits.end()) {
            return exits[direction];
        } else {
            return nullptr;
        }
    }
};

// Task 1: Design the Command Interpreter Class
class CommandInterpreter {
public:
    CommandInterpreter(Player* player) : player_(player) {}

    void interpretCommand(const std::string& command);

private:
    Player* player_; // Pointer to the player object
};

// Task 2: Implement Player and NPC Actions
class Player {
private:
    Room* currentRoom;

public:
    Player() : currentRoom(nullptr) {}

  // simple ai determines course of action based on player action.

    void move(const std::string& direction) {
        if (currentRoom != nullptr) {
            Room* nextRoom = currentRoom->getExit(direction);
            if (nextRoom != nullptr) {
                currentRoom = nextRoom;
                std::cout << "Moved to " << currentRoom->name << "." << std::endl;
            } else {
                std::cout << "You can't go that way." << std::endl;
            }
        }
    }

    void lookAround() const {
        if (currentRoom != nullptr) {
            std::cout << "You are in " << currentRoom->name << "." << std::endl;
            if (!currentRoom->exits.empty()) {
                std::cout << "Exits:";
                for (const auto& exit : currentRoom->exits) {
                    std::cout << " " << exit.first;
                }
                std::cout << std::endl;
            } else {
                std::cout << "There are no exits." << std::endl;
            }
        } else {
            std::cout << "You are nowhere." << std::endl;
        }
    }

    void setCurrentRoom(Room* room) {
        currentRoom = room;
    }
};

// re task 3 to integrate interpreter
// here is to execute player commands through the interpreter.
void CommandInterpreter::interpretCommand(const std::string& command) {
  
    std::istringstream iss(command);
    std::string action;
    iss >> action;

    if (action == "move") {
        std::string direction;
        if (iss >> direction) {
            player_->move(direction);
        } else {
            std::cout << "Move where?" << std::endl;
        }
      
    } else if (action == "look") {
        player_->lookAround();
    } else {
        std::cout << "Unknown command." << std::endl;
    }
}

int main() {
    // small world for demonstration. 
    Room* startRoom = new Room("Start Room");
    Room* secondRoom = new Room("Second Room");
    startRoom->addExit("north", secondRoom);

    Player player;
    player.setCurrentRoom(startRoom);

    CommandInterpreter interpreter(&player);

    std::string command;
    std::cout << "Enter commands ('quit' to exit):" << std::endl;
    while (std::getline(std::cin, command) && command != "quit") {
        interpreter.interpretCommand(command);
    }

    delete startRoom;
    delete secondRoom;
    return 0;
}
